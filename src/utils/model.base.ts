import * as objection from 'objection'
import { ModelOptions, QueryBuilder, QueryContext } from 'objection'
import * as softDelete from 'objection-softdelete'

softDelete.register(objection, {
  deleteAttr: 'deleted_at'
})

export type SoftDeleteQueryBuilder<T extends objection.Model> = QueryBuilder<T> & {
  includeDeleted: () => SoftDeleteQueryBuilder<T>
}

export class BaseModel extends objection.Model {
	// If you need to log sql queries generated by knex - uncomment method below
	static query(...args): any {
		return super.query(...args).onBuildKnex(knexQueryBuilder => {
			knexQueryBuilder.on('query', queryData => {
				const sql = queryData.bindings.reduce((init, item) => {
					init = init.replace(/\?/, typeof item === 'string' ? `'${item}'` : item)
					return init
				}, queryData.sql)
				console.log(`
				[SQL]: ${sql}
				`)
			})
		})
	}

  public id: number

  created_at?: Date
  updated_at?: Date
  deleted_at?: Date

  async $beforeInsert(queryContext: QueryContext) {
    // @ts-ignore
    await super.$beforeInsert(queryContext)
    this.created_at = new Date().toISOString() as any
    this.updated_at = new Date().toISOString() as any
  }

  async $beforeUpdate(opt: ModelOptions, queryContext: QueryContext) {
    // @ts-ignore
    await super.$beforeUpdate(opt, queryContext)
    this.updated_at = new Date().toISOString() as any
  }

  $parseDatabaseJson(json: object) {
    // @ts-ignore
    json = super.$parseDatabaseJson(json)
    this.coerceToDate(json, 'created_at')
    this.coerceToDate(json, 'updated_at')
    // this.coerceToDate(json, 'deleted_at')
    return json
  }

  $formatDatabaseJson(json: object) {
    // @ts-ignore
    json = super.$formatDatabaseJson(json)
    this.coerceToTime(json, 'created_at')
    this.coerceToTime(json, 'updated_at')
    // this.coerceToTime(json, 'deleted_at')
    return json
  }

  coerceToDate(obj: any, fieldName: string): any {
    if (obj != null && typeof obj[fieldName] === 'number') {
      obj[fieldName] = new Date(obj[fieldName])
    }
    return obj
  }

  coerceToTime(obj: any, fieldName: string): any {
    if (obj != null && obj[fieldName] != null && obj[fieldName].toISOString) {
      obj[fieldName] = obj[fieldName].toISOString()
    }
    return obj
  }

  static get softDelete() {
    return true
  }
}
